<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
  <id>https://leebyron.com/til/feed.xml</id>
  <link rel="self" type="application/atom+xml" href="https://leebyron.com/til/feed.xml"/>
  <link rel="alternate" type="text/html" href="https://leebyron.com/til/"/>
  <updated>2022-01-23T21:10:21.000+00:00</updated>
  <title>Lee Byron / til</title>
  <subtitle>
    Today I Learned: A bunch of brief blurbs on miscellaneous matter.
  </subtitle>
  <icon>https://leebyron.com/til/assets/favicon.png</icon>
  <author>
    <name>Lee Byron</name>
    <uri>https://leebyron.com</uri>
  </author>
  <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  <generator uri="https://github.com/leebyron/til">til</generator>
  <entry>
    <id>https://leebyron.com/til/ikagai/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/ikagai/"/>
    <published>2022-01-23T11:31:22.000-08:00</published>
    <updated>2022-01-23T21:10:21.000+00:00</updated>
    <title>ikagai</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="career"/>
    <content type="html"><![CDATA[<p>
  Years ago I came across this philosophy of &quot;Ikagai&quot; (or &quot;reason for life&quot;) in <a href="https://theviewinside.me/what-is-your-ikigai/" target="_blank">a
blog post</a>, along with an explanatory four-axis
venn-diagram<a href="#fn-meme-seeding" id="fn-meme-seeding.ref" data-footnote-ref aria-label="note"><sup>1</sup></a>. It introduced the concept of honing in on a life's
purpose by way of doing what you're good at, what you enjoy, what the world
needs, and what you can be paid for. This really resonated with me.
</p>
<p>
  I find this model a helpful tool in thinking about my own career, but it's
important to remember that it's just that: a model. While I like the framework,
as I've read more about Ikagai I also have some real concerns with it:
</p>
<ul>
  <li>
    <p>
      It's mired in the pseudo-science of &quot;self help&quot; that I'm really suspicious of.
Most books out there frame Ikagai as an elusive thing that you need to start
searching for, won't find happiness without, and need coaching to achieve.
    </p>
  </li>
  <li>
    <p>
      It feels like yet another foreign cultural fetishization. Ikagai is a Japanese
concept but nearly all material written on it is English.
    </p>
  </li>
  <li>
    <p>
      The origins of Ikagai's introduction to English readers is via a <a href="http://www.ted.com/talks/dan_buettner_how_to_live_to_be_100" target="_blank">TED
talk</a> on the unusual lives of centenarians on Okinawa
Island which don't seem to relate to the venn-diagram, where did that come
from?
    </p>
  </li>
</ul>
<p>
  These concerns turn out to be somewhat valid. In fact the origin of this
venn-diagram concept is not Japanese at all, but instead comes from a book by
Spanish Astrologist, <a href="https://www.cosmograma.com/proposito.php" target="_blank">Andrés Zuzunaga</a>. <a href="https://theviewinside.me/what-is-your-ikigai/" target="_blank">Marc Winn's blog post</a> combined this
graphic with the idea of Ikagai presented in <a href="http://www.ted.com/talks/dan_buettner_how_to_live_to_be_100" target="_blank">Dan Buettner's TED talk</a> and
voilà.
</p>
<p>
  Despite it's shortcomings and misappropriation I still really like this mental
model for considering career progression and debugging gaps in a sense of
fulfillment. Here's my translation of Andrés Zuzunaga's original graphic in
English:
</p>
<p>
  <img src="../media/82b332968f3e80ff.svg" alt="purpose.svg">
</p>
<p>
  Ikagai is still a very real concept, just not the same one as presented by most
of these blog posts and books. Japanese neuroscientist Ken Mogi (who has also
written a book on Ikagai) has <a href="https://youtu.be/a_2RIydy_NQ" target="_blank">a video</a> addressing the
venn-diagram and attempting to reclaim the term back to its original intent.
</p>
<section data-footnotes aria-label="footnotes">
  <ol>
    <li id="fn-meme-seeding">
      <p>
        Years later, Mark wrote a <a href="https://theviewinside.me/meme-seeding/" target="_blank">follow up
post</a> on the origins of his article on Ikagai and
addressed how it took on a life of its own.
      </p>
      <a href="#fn-meme-seeding.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
  </ol>
</section>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://leebyron.com/til/multi-purpose-modifier-keys/
    </id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/multi-purpose-modifier-keys/"/>
    <published>2022-01-22T22:19:43.000-08:00</published>
    <updated>2022-01-23T06:48:43.000+00:00</updated>
    <title>multi-purpose modifier keys</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="keyboards"/>
    <content type="html"><![CDATA[<p>
  I spent a very long time not thinking too hard about customizing my keyboard
beyond <a href="https://leebyron.com/til/remap-caps-lock/" target="_blank">remapping caps lock</a>. That is not until recently when I
started playing around with the custom keyboard firmware <a href="https://qmk.fm" target="_blank">QMK</a> and macOS
keyboard customization software <a href="https://karabiner-elements.pqrs.org" target="_blank">Karabiner</a>. The most immediately useful thing I
discovered was leveraging modifier keys to have multiple purposes.
</p>
<p>
  Modifier keys are held down so that other key presses result in a different
symbol or command. But what if they're pressed alone? Nothing happens? That's an
opportunity.
</p>
<p>
  The first I tried was the &quot;Vim key&quot;. Caps lock is remapped to the much more
useful control key when held. When pressed alone, it is escape. This key is
really easy to reach from the home row and this made getting in and out of Vim
insert mode feel much easier. However I found myself falling back to muscle
memory to reach for escape or use the equivalent and now easier to press
control+c.
</p>
<p>
  Much more ergonomically offensive is backspace. I'm a terrible typist so
backspace is probably one of my most pressed keys and far enough from the home
row that my whole hand must move. So the next mapping I've tried is Caps lock as
control and backspace. This muscle memory has been hard to unwire, so I've
disabled my true backspace key.
</p>
<p>
  Here's a small part of my Karabiner &quot;complex_modifications&quot; configuration:
</p>
<pre data-code-block data-lang="json"><code><span data-line="1"><span style="color:#22863A;">&quot;manipulators&quot;</span><span style="color:#24292EFF;">: [</span>
</span><span data-line="2"><span style="color:#24292EFF;">    {</span>
</span><span data-line="3"><span style="color:#24292EFF;">        </span><span style="color:#D32F2F;">&quot;type&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;basic&quot;</span><span style="color:#212121;">,</span>
</span><span data-line="4"><span style="color:#24292EFF;">        </span><span style="color:#D32F2F;">&quot;from&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> {</span>
</span><span data-line="5"><span style="color:#24292EFF;">            </span><span style="color:#D32F2F;">&quot;key_code&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;caps_lock&quot;</span><span style="color:#212121;">,</span>
</span><span data-line="6"><span style="color:#24292EFF;">            </span><span style="color:#D32F2F;">&quot;modifiers&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> { </span><span style="color:#D32F2F;">&quot;optional&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> [</span><span style="color:#22863A;">&quot;any&quot;</span><span style="color:#24292EFF;">] } }</span><span style="color:#212121;">,</span>
</span><span data-line="7"><span style="color:#24292EFF;">        </span><span style="color:#D32F2F;">&quot;to&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> [ { </span><span style="color:#D32F2F;">&quot;key_code&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;left_control&quot;</span><span style="color:#212121;">,</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">&quot;lazy&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> </span><span style="color:#1976D2;">true</span><span style="color:#24292EFF;"> } ]</span><span style="color:#212121;">,</span>
</span><span data-line="8"><span style="color:#24292EFF;">        </span><span style="color:#D32F2F;">&quot;to_if_alone&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> [ { </span><span style="color:#D32F2F;">&quot;key_code&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;delete_or_backspace&quot;</span><span style="color:#24292EFF;"> } ] }</span><span style="color:#212121;">,</span>
</span><span data-line="9"><span style="color:#24292EFF;">    {</span>
</span><span data-line="10"><span style="color:#24292EFF;">        </span><span style="color:#D32F2F;">&quot;type&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;basic&quot;</span><span style="color:#212121;">,</span>
</span><span data-line="11"><span style="color:#24292EFF;">        </span><span style="color:#D32F2F;">&quot;from&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> {</span>
</span><span data-line="12"><span style="color:#24292EFF;">            </span><span style="color:#D32F2F;">&quot;key_code&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;delete_or_backspace&quot;</span><span style="color:#212121;">,</span>
</span><span data-line="13"><span style="color:#24292EFF;">            </span><span style="color:#D32F2F;">&quot;modifiers&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> { </span><span style="color:#D32F2F;">&quot;optional&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> [ </span><span style="color:#22863A;">&quot;all&quot;</span><span style="color:#24292EFF;"> ] } }</span><span style="color:#212121;">,</span>
</span><span data-line="14"><span style="color:#24292EFF;">        </span><span style="color:#D32F2F;">&quot;to&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> [ { </span><span style="color:#D32F2F;">&quot;key_code&quot;</span><span style="color:#212121;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">&quot;vk_none&quot;</span><span style="color:#24292EFF;"> } ] }</span><span style="color:#212121;">,</span>
</span></code></pre>
<p>
  Also, this works both ways! Not only can you provide a behavior for pressing
modifier keys on their own, but also consider making a typical key a modifier
when held. As an example, I map the return key to behave as &quot;right control&quot; when
held.
</p>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/ripgrep/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/ripgrep/"/>
    <published>2022-01-21T22:24:50.000-08:00</published>
    <updated>2022-01-22T06:47:44.000+00:00</updated>
    <title>r.i.p. grep</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="terminal"/>
    <content type="html"><![CDATA[<p>
  One of the oldest and most incredible tools in the terminal is <code>grep</code><a href="#fn-grep" id="fn-grep.ref" data-footnote-ref aria-label="note"><sup>1</sup></a>. It
was written overnight by the GOAT, <a href="https://en.wikipedia.org/wiki/Ken_Thompson" target="_blank">Ken Thompson</a>, back in the early 1970s. It
allows you to search through a file (or stdin) for a regular expression
pattern<a href="#fn-regexp" id="fn-regexp.ref" data-footnote-ref aria-label="note"><sup>2</sup></a>. Useful then, useful now. Incredible.
</p>
<p>
  However, it turns out that software written fifty years ago might start to show
signs of age. Enter <a href="https://github.com/BurntSushi/ripgrep" target="_blank">ripgrep</a>, or <code>rg</code> in your terminal. It is faster, it is
aware of your <code>.gitignore</code> files, it prints results in color, it has a modern
RegExp engine, it supports full Unicode, it searches compressed files, it has an
easy to use and very powerful set of options, and of course it takes half as
many letters to type.
</p>
<p>
  Do yourself a favor and install it:
</p>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">brew install ripgrep</span>
</span></code></pre>
<p>
  Want to learn more? Check out the <a href="https://github.com/BurntSushi/ripgrep" target="_blank">ripgrep</a> project page, this very
<a href="https://blog.burntsushi.net/ripgrep/" target="_blank">in depth article</a> explaining why it's
fast and how it works, or this fantastic resource
<a href="https://beyondgrep.com/feature-comparison/" target="_blank">comparing many grep replacements</a>.
</p>
<section data-footnotes aria-label="footnotes">
  <ol>
    <li id="fn-grep">
      <p>
        The name &quot;grep&quot; comes from <code>g/re/p</code> – globally run a regular expression and
print. It was literally that exact command extracted from the <code>ed</code> text
editor. There's a great
<a href="https://www.youtube.com/watch?v=NTfOnGZUZDk" target="_blank">Computerphile</a> video which
tells this story.
      </p>
      <a href="#fn-grep.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
    <li id="fn-regexp">
      <p>
        Ken Thompson didn't invent Regular Expressions, but did popularize their use
in computers. One of many reasons he is one of the greatest of all time.
      </p>
      <a href="#fn-regexp.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
  </ol>
</section>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/bat-a-cat-with-wings/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/bat-a-cat-with-wings/"/>
    <published>2022-01-20T23:42:20.000-08:00</published>
    <updated>2022-01-21T08:53:04.000+00:00</updated>
    <title>bat, a cat with wings</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="terminal"/>
    <content type="html"><![CDATA[<p>
  On macOS there is the fantastic &quot;Preview&quot; utility. Select a file and hit space
bar to quickly take a look at the contents. In terminal things are a little
different. There's <code>tail</code>, <code>cat</code>, and <code>less</code>. Bash denizens will be familiar
with the results.
</p>
<p>
  <img src="../media/76a2c219c5bdb4fc.png" alt="regular old cat">
</p>
<p>
  Good luck if you try taking a look at a massive file, a file with long lines, or
to get a quick read on some code. Maybe your habit is to open files in Vim or
another editor so you can at least move around quickly and get some basic syntax
highlighting.
</p>
<p>
  There's a better way...
</p>
<p>
  Use <a href="https://github.com/sharkdp/bat" target="_blank"><code>bat</code></a>, it's just <code>cat</code> but with wings. It syntax highlights, it shows line
numbers, it intelligently pipes to <code>less</code> (if it needs to), it even integrates
with <code>git</code> to point out modified lines. It knows where its running and where its
printing and falls back to the simple thing when you just need it to <code>cat</code> a
file.
</p>
<p>
  <img src="../media/37d23ef3d437ac42.png" alt="bat! it's got wings">
</p>
<p>
  Learn more about <code>bat</code> at <a href="https://github.com/sharkdp/bat" target="_blank">github.com/sharkdp/bat</a>, and install with
<a href="https://formulae.brew.sh/formula/bat" target="_blank">Homebrew</a>:
</p>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">brew install bat</span>
</span></code></pre>
<p>
  One more thing. Combine <code>bat</code> with <code>prettier</code> as <a href="https://github.com/eth-p/bat-extras/blob/master/doc/prettybat.md" target="_blank"><code>prettybat</code></a>, or with <code>man</code> as
<a href="https://github.com/eth-p/bat-extras/blob/master/doc/batman.md" target="_blank"><code>batman</code></a>, a few of many bonus tools that comes with <a href="https://github.com/eth-p/bat-extras/blob/master/README.md#installation" target="_blank"><code>bat-extras</code></a>.
</p>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/launch-control/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/launch-control/"/>
    <published>2022-01-19T23:07:38.000-08:00</published>
    <updated>2022-01-20T08:00:22.000+00:00</updated>
    <title>launch control</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="mac"/>
    <content type="html"><![CDATA[<p>
  I need to run a command every time a particular file changed. In the past I've
used tools like <a href="https://facebook.github.io/watchman/" target="_blank">watchman</a> to do this, and found them heavyweight. In this
particular case, I could safely assume I was running on macOS and wanted to
avoid the dependency of installed software. <em>Then I learned about <code>launchctl</code>.</em>
</p>
<p>
  The man page for <a href="x-man-page://launchctl">launchctl</a> is not particularly helpful, so it required some
searching and experimenting to understand. This, along with <a href="x-man-page://launchd">launchd</a>, are a
powerful system for configuring services within the operating system. One way
launchd determines that a service should be started is by watching for changes
to a file. Perfect.
</p>
<p>
  A &quot;service&quot; is any executable program (like a shell script or a JavaScript file)
and a configuration plist file placed in a specific location. For example, lets
set up a service that runs a website builder every time a source file is
updated.
</p>
<p>
  Here, <code>~/Library/LaunchAgents/com.leebyron.website-agent.plist</code> defines the name
of my agent, the program to run, where to write standard output, and the path to
watch. Changes to that path will run my program. Note that the program is not
run inside a shell, so a node script needs to provide a full path to the node
executable, rather than a executable &quot;hash bang&quot;.
</p>
<pre data-code-block data-lang="xml"><code><span data-line="1"><span style="color:#24292EFF;">&lt;?</span><span style="color:#22863A;">xml</span><span style="color:#6F42C1;"> version</span><span style="color:#24292EFF;">=</span><span style="color:#22863A;">&quot;1.0&quot;</span><span style="color:#6F42C1;"> encoding</span><span style="color:#24292EFF;">=</span><span style="color:#22863A;">&quot;UTF-8&quot;</span><span style="color:#24292EFF;">?&gt;</span>
</span><span data-line="2"><span style="color:#24292EFF;">&lt;!</span><span style="color:#D32F2F;">DOCTYPE</span><span style="color:#24292EFF;"> plist PUBLIC &quot;-//Apple Computer//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span data-line="3"><span style="color:#24292EFF;">&lt;</span><span style="color:#22863A;">plist</span><span style="color:#24292EFF;"> </span><span style="color:#6F42C1;">version</span><span style="color:#24292EFF;">=</span><span style="color:#22863A;">&quot;1.0&quot;</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="4"><span style="color:#24292EFF;">&lt;</span><span style="color:#22863A;">dict</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="5"><span style="color:#24292EFF;">    &lt;</span><span style="color:#22863A;">key</span><span style="color:#24292EFF;">&gt;Label&lt;/</span><span style="color:#22863A;">key</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="6"><span style="color:#24292EFF;">    &lt;</span><span style="color:#22863A;">string</span><span style="color:#24292EFF;">&gt;com.leebyron.website-agent&lt;/</span><span style="color:#22863A;">string</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="7"><span style="color:#24292EFF;">    &lt;</span><span style="color:#22863A;">key</span><span style="color:#24292EFF;">&gt;ProgramArguments&lt;/</span><span style="color:#22863A;">key</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="8"><span style="color:#24292EFF;">    &lt;</span><span style="color:#22863A;">array</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="9"><span style="color:#24292EFF;">        &lt;</span><span style="color:#22863A;">string</span><span style="color:#24292EFF;">&gt;/Users/leebyron/.nvm/versions/node/v17.3.0/bin/node&lt;/</span><span style="color:#22863A;">string</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="10"><span style="color:#24292EFF;">        &lt;</span><span style="color:#22863A;">string</span><span style="color:#24292EFF;">&gt;/Users/leebyron/projects/website/generate.js&lt;/</span><span style="color:#22863A;">string</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="11"><span style="color:#24292EFF;">    &lt;/</span><span style="color:#22863A;">array</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="12"><span style="color:#24292EFF;">    &lt;</span><span style="color:#22863A;">key</span><span style="color:#24292EFF;">&gt;StandardOutPath&lt;/</span><span style="color:#22863A;">key</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="13"><span style="color:#24292EFF;">    &lt;</span><span style="color:#22863A;">string</span><span style="color:#24292EFF;">&gt;/Users/leebyron/projects/website/output.log&lt;/</span><span style="color:#22863A;">string</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="14"><span style="color:#24292EFF;">    &lt;</span><span style="color:#22863A;">key</span><span style="color:#24292EFF;">&gt;StandardErrorPath&lt;/</span><span style="color:#22863A;">key</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="15"><span style="color:#24292EFF;">    &lt;</span><span style="color:#22863A;">string</span><span style="color:#24292EFF;">&gt;/Users/leebyron/projects/website/output.log&lt;/</span><span style="color:#22863A;">string</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="16"><span style="color:#24292EFF;">    &lt;</span><span style="color:#22863A;">key</span><span style="color:#24292EFF;">&gt;WatchPaths&lt;/</span><span style="color:#22863A;">key</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="17"><span style="color:#24292EFF;">    &lt;</span><span style="color:#22863A;">array</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="18"><span style="color:#24292EFF;">        &lt;</span><span style="color:#22863A;">string</span><span style="color:#24292EFF;">&gt;/Users/leebyron/projects/website/src&lt;/</span><span style="color:#22863A;">string</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="19"><span style="color:#24292EFF;">    &lt;/</span><span style="color:#22863A;">array</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="20"><span style="color:#24292EFF;">&lt;/</span><span style="color:#22863A;">dict</span><span style="color:#24292EFF;">&gt;</span>
</span><span data-line="21"><span style="color:#24292EFF;">&lt;/</span><span style="color:#22863A;">plist</span><span style="color:#24292EFF;">&gt;</span>
</span></code></pre>
<p>
  Finally, tell launch control about this service. You'll need to know your uid
number (which you can find by running the <code>id</code> command). Replace &quot;500&quot; here with
whatever your uid happens to be.
</p>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">launchctl bootstrap gui/500/ </span><span style="color:#D32F2F;">~</span><span style="color:#24292EFF;">/Library/LaunchAgents/com.leebyron.website-agent.plist</span>
</span></code></pre>
<p>
  To remove this service, replace <code>bootstrap</code> with <code>bootout</code>:
</p>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">launchctl bootout gui/500/ </span><span style="color:#D32F2F;">~</span><span style="color:#24292EFF;">/Library/LaunchAgents/com.leebyron.website-agent.plist</span>
</span></code></pre>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://leebyron.com/til/type-unicode-from-the-keyboard/
    </id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/type-unicode-from-the-keyboard/"/>
    <published>2022-01-18T23:14:26.000-08:00</published>
    <updated>2022-01-19T08:31:54.000+00:00</updated>
    <title>type unicode from the keyboard</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="mac"/>
    <category term="keyboard"/>
    <content type="html"><![CDATA[<p>
  I'm often looking up Unicode code points to use in various places. There are two
ways I type them quickly from the keyboard.
</p>
<p>
  The first way is a cheat. In the first tab of Keyboard preferences, ensure
&quot;Press 🌐 to: &quot; is set to &quot;Show Emoji &amp; Symbols&quot;. Now tap the <code>fn</code> key to bring
up the Symbols picker. The search does a half decent job of finding the symbol
you need. Clicking it behaves as a key press.
</p>
<p>
  The second way is best if you know the <em>code</em>. From the Keyboard preferences in
the &quot;Input Sources&quot; tab, press the <code>+</code> button and add the &quot;Unicode Hex Input&quot;
keyboard. When using this keyboard, <code>⌥+&lt;key&gt;</code> no longer produces an alternate
symbol, but instead allows you to type in hex codes.
</p>
<p>
  Now by holding ⌥ and typing <code>229b</code>, I can type: ⊛
</p>
<p>
  One small caveat is that this only supports 4-digit UTF-16 codes, but it does
support surrogate pairs. This is annoying to type, but does allow entering Emoji
directly via keyboard.
</p>
<p>
  For example holding ⌥ and typing <code>d83ddcbe</code>: 💾
</p>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/command-z-in-vim/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/command-z-in-vim/"/>
    <published>2022-01-17T22:46:57.000-08:00</published>
    <updated>2022-01-19T08:32:44.000+00:00</updated>
    <title>command-z in vim</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="vim"/>
    <content type="html"><![CDATA[<p>
  Vim, run from the terminal, does not make use of the Command key. So most of my
muscle memory has been lost while learning it. However I found a shortcut:
iTerm's key mapping.
</p>
<p>
  In iTerm, open Preferences (or press <code>Command-,</code> and in the Keys tab add a new
Key Binding.
</p>
<ul>
  <li>
    <p>
      Keyboard Shortcut: ⌘z
    </p>
  </li>
  <li>
    <p>
      Action: Send text with &quot;vim&quot; Special Chars
    </p>
  </li>
  <li>
    <p>
      Value: <code>\&lt;M-u&gt;</code> (The backslash is important)
    </p>
  </li>
</ul>
<p>
  Now within the terminal, hitting Command-Z (Undo) will map to Meta-U, which will
perform Undo in Vim.
</p>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/enable-key-repeat/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/enable-key-repeat/"/>
    <published>2022-01-16T23:09:29.000-08:00</published>
    <updated>2022-01-17T08:00:46.000+00:00</updated>
    <title>enable key repeat</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="mac"/>
    <content type="html"><![CDATA[<p>
  In macOS, when you hold down a letter key you see a small popover with available
alternates for that letter (for example by applying accents). This behavior can
be disabled, returning to the previous behavior where holding a key repeats that
letter until you release it.
</p>
<p>
  To do so for a specific app:
</p>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">defaults write com.googlecode.iterm2 ApplePressAndHoldEnabled -bool </span><span style="color:#6F42C1;">false</span>
</span></code></pre>
<p>
  Or to disable system wide:
</p>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">defaults write -g ApplePressAndHoldEnabled -bool </span><span style="color:#6F42C1;">false</span>
</span></code></pre>
<p>
  After changing this setting, you need to restart the app or sign in session.
</p>
<p>
  <em>I learned this TIL recently from <a href="https://twitter.com/rsms" target="_blank">@rsms</a> care of his excellent <a href="https://gist.github.com/rsms/fb463396c95ad8d9efa338a8050a01dc" target="_blank">macOS Fixes</a>
doc.</em>
</p>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/remap-caps-lock/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/remap-caps-lock/"/>
    <published>2022-01-15T20:41:11.000-08:00</published>
    <updated>2022-01-16T04:49:14.000+00:00</updated>
    <title>remap caps lock</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="mac"/>
    <content type="html"><![CDATA[<p>
  The caps lock key is conveniently located next to your left pinkie on the home
row, easier to press than almost all other modifiers despite being one I find
least useful. Luckily, macOS makes it very easy to remap this key<a href="#fn-alternative" id="fn-alternative.ref" data-footnote-ref aria-label="note"><sup>1</sup></a>.
</p>
<p>
  In System Preferences → Keyboard, press &quot;Modifier Keys...&quot; to open a menu
mapping physical keys to the action they apply. I always remap my caps lock key
to &quot;Control&quot;, since I spend a fair amount of time in Terminal, where Control is
used a fair amount (like Control-C to send <code>SIGINT</code>, or Control-Z to send
<code>SIGTSTP</code>).
</p>
<p>
  <img src="../media/91e205164869e572.png" alt="Screen Shot 2022-01-15 at 8.39.01 PM.png">
</p>
<section data-footnotes aria-label="footnotes">
  <ol>
    <li id="fn-alternative">
      <p>
        There is other software for much more powerful key
remapping, which I'll write about in the future. It's nice that this is an
OS-provided preference, so you can quickly set it without installing anything.
      </p>
      <a href="#fn-alternative.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
  </ol>
</section>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/mac-find-buffer/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/mac-find-buffer/"/>
    <published>2022-01-14T22:25:32.000-08:00</published>
    <updated>2022-01-15T06:36:45.000+00:00</updated>
    <title>mac find buffer</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="mac"/>
    <content type="html"><![CDATA[<p>
  Most text based apps on the Mac have a find buffer accessed with ⌘F. A common
workflow is to select some text, copy it with ⌘C, open find with ⌘F, paste the
searched text with ⌘V, hit return to find the next instance, and hit return
multiple times until you find the instance you're looking for, then hit escape
to close the find overlay.
</p>
<p>
  <em>There's a faster way.</em>
</p>
<p>
  After selecting text, press ⌘E to fill that text into the find buffer. It may
look like nothing happened, but now press ⌘G to find the next instance of that
text (⌘⇧G to find the previous). Continue pressing ⌘G until you find the
instance you're looking for.
</p>
<p>
  This has a benefit of not changing modes; your cursor remains within the text
document rather than being caught by the find input.
</p>
<p>
  This works in Safari, Chrome, TextEdit, Notes, VSCode, Terminal (but not iTerm),
and most other places you work with text in macOS.
</p>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/remove-mac-desktop/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/remove-mac-desktop/"/>
    <published>2022-01-13T21:32:26.000-08:00</published>
    <updated>2022-01-14T07:31:43.000+00:00</updated>
    <title>how to remove the mac desktop</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="mac"/>
    <content type="html"><![CDATA[<p>
  After nearly two decades on a Mac, I've finally come to the conclusion that the
Desktop is actively harmful. It is the junk drawer of the Mac. It distracts me,
it collects stuff, things get lost there, I'm done with it.
</p>
<p>
  <strong>Here's how to get rid of it.</strong>
</p>
<ul>
  <li>
    <p>
      Remove everything from the Desktop folder.
    </p>
  </li>
  <li>
    <p>
      Make sure nothing is being automatically saved to the desktop. The most likely
culprit is <a href="../mac-screenshot/">Screenshot.app</a>.
    </p>
  </li>
  <li>
    <p>
      Disable the Desktop folder from the desktop, and restart Finder
    </p>
    <pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">defaults write com.apple.finder CreateDesktop </span><span style="color:#6F42C1;">false</span>
</span><span data-line="2"><span style="color:#24292EFF;">Killall Finder</span>
</span></code></pre>
  </li>
  <li>
    <p>
      Open Finder, right click Desktop in sidebar and &quot;Remove from Sidebar&quot;
    </p>
  </li>
</ul>
<p>
  You can't actually delete the Desktop folder itself, because Finder will just
recreate it upon finding it missing. You can instead render it useless by
symlinking it back to your home directory<a href="#fn-symlink" id="fn-symlink.ref" data-footnote-ref aria-label="note"><sup>1</sup></a>.
</p>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">rm -rf </span><span style="color:#D32F2F;">~</span><span style="color:#24292EFF;">/Desktop</span>
</span><span data-line="2"><span style="color:#24292EFF;">ln -s </span><span style="color:#D32F2F;">~</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">~</span><span style="color:#24292EFF;">/Desktop</span>
</span><span data-line="3"><span style="color:#24292EFF;">sudo chflags -h schg </span><span style="color:#D32F2F;">~</span><span style="color:#24292EFF;">/Desktop</span>
</span></code></pre>
<p>
  This last step stops Finder from replacing the symlink with an empty directory.
</p>
<section data-footnotes aria-label="footnotes">
  <ol>
    <li id="fn-symlink">
      <p>
        As an aside, if you want to keep your Desktop but want to put it somewhere
else (like within Dropbox), these same symlinking steps will achieve this,
just change the linked location.
      </p>
      <a href="#fn-symlink.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
  </ol>
</section>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/mac-screenshot/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/mac-screenshot/"/>
    <published>2022-01-13T17:39:49.000-08:00</published>
    <updated>2022-01-14T18:12:04.000+00:00</updated>
    <title>mac screenshot</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="mac"/>
    <content type="html"><![CDATA[<p>
  Mac has some keyboard shortcuts for capturing your screen via an app called
&quot;Screenshot.&quot;
</p>
<ul>
  <li>
    <p>
      Capture your entire screen with Command+Shift+3
    </p>
  </li>
  <li>
    <p>
      Capture a portion of the screen with Command+Shift+4, then drag and release a
rectangle.
    </p>
    <ul>
      <li>
        <p>
          Before dragging, press space bar to toggle on capture window mode, then
click the window to capture. This has the nice benefit of including the
window's drop shadow with image transparency.
        </p>
      </li>
      <li>
        <p>
          While dragging, hold space bar to change from sizing the capture area to
moving the capture area.
        </p>
      </li>
    </ul>
  </li>
  <li>
    <p>
      Pull up the Screenshot app with Command+Shift+5<a href="#fn-finder" id="fn-finder.ref" data-footnote-ref aria-label="note"><sup>1</sup></a>, and access the three
image capture modes as well as two video capture modes and an options menu.
    </p>
  </li>
</ul>
<p>
  By default all screenshots are saved to the Desktop. To keep your Desktop from
becoming a junk drawer, I highly recommend saving them in some other dedicated
location. I personally create a folder called &quot;Screenshots&quot; that I put at the
top level of my Dropbox folder. If you don't use Dropbox, consider a folder in
your home directory.
</p>
<p>
  Open the Screenshot app and in the bar that appears click &quot;Options&quot;, and under
the &quot;Save to&quot; heading choose &quot;Other Location&quot; and choose or create the dedicated
folder. Afterwards, I recommend adding your Screenshots folder to your Finder's
sidebar for quick access.
</p>
<p>
  While you're at it, take a look at the other options. I like to disable &quot;Show
Floating Thumbnail&quot; since that feature delays saving the screenshot to disk for
a number of seconds.
</p>
<p>
  Alternatively, you can use the <code>defaults</code> terminal command:
</p>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">defaults write com.apple.screencapture location </span><span style="color:#22863A;">&quot;~/Dropbox/Screenshots&quot;</span>
</span></code></pre>
<p>
  To make sure it worked (and check your other settings):
</p>
<pre data-code-block data-lang="sh"><code><span data-line="1"><span style="color:#24292EFF;">defaults </span><span style="color:#6F42C1;">read</span><span style="color:#24292EFF;"> com.apple.screencapture</span>
</span></code></pre>
<p>
  <img src="../media/5d29319e337e0664.png" alt="Screenshot.app Options">
</p>
<section data-footnotes aria-label="footnotes">
  <ol>
    <li id="fn-finder">
      <p>
        Or you can open it directly via Finder. It's in <code>/Applications/Utilities</code>
and called &quot;Screenshot.app&quot;
      </p>
      <a href="#fn-finder.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
  </ol>
</section>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/leap/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/leap/"/>
    <published>2022-01-12T20:01:10.000-08:00</published>
    <updated>2022-01-13T07:28:02.000+00:00</updated>
    <title>leap®</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="keyboards"/>
    <content type="html"><![CDATA[<p>
  The <a href="https://en.wikipedia.org/wiki/Canon_Cat" target="_blank">Canon Cat</a> was a computer designed by <a href="https://en.wikipedia.org/wiki/Jef_Raskin" target="_blank">Jef Raskin</a>, who also dreamed up the
Apple Macintosh. Steve Jobs meddled too much in the Mac and Raskin left Apple to
create the Cat<a href="#fn-swyft" id="fn-swyft.ref" data-footnote-ref aria-label="note"><sup>1</sup></a>. It was a commercial flop, but had some awesome ideas
mostly lost to time.
</p>
<p>
  Raskin was no fan of the computer mouse<a href="#fn-hth" id="fn-hth.ref" data-footnote-ref aria-label="note"><sup>2</sup></a> and thought keyboard driven UIs
could be much more powerful, and the Cat has a couple tricks which show that he
was truly onto something, most notably: <em>Leap</em>.
</p>
<p>
  The Cat keyboard is really unique. This computer has no mouse and no arrow
keys<a href="#fn-creep" id="fn-creep.ref" data-footnote-ref aria-label="note"><sup>3</sup></a>. Instead it has &quot;Leap&quot; keys under the space bar.
</p>
<p>
  <img src="../media/32fbd2a67421bb0d.jpeg" title="Credit: https://vintagecomputer.ca/canon-cat/" alt="Canon Cat keyboard">
</p>
<ul>
  <li>
    <p>
      To move around you hold down a Leap key with your thumb (in the direction you
want to move) and start typing the thing you want to move to. The cursor moves
in real-time with each key press.
    </p>
  </li>
  <li>
    <p>
      If you got it wrong you can hit &quot;Undo&quot; to go back.
    </p>
  </li>
  <li>
    <p>
      To keep looking for the same thing, hold &quot;Use Front&quot;<a href="#fn-use-front" id="fn-use-front.ref" data-footnote-ref aria-label="note"><sup>4</sup></a> and &quot;Leap
Again&quot;.
    </p>
  </li>
  <li>
    <p>
      There's a dedicated &quot;Page&quot; button so you can Leap through page by page to
rapidly move through a large file (or press it on its own to create a new
blank page).
    </p>
  </li>
  <li>
    <p>
      Pressing both Leap keys highlights the text between the cursor and the
previously leapt location. Leaping with highlighted text moves that text along
with the cursor.
    </p>
  </li>
</ul>
<p>
  This is so different from what we're used to that it seems like it might be
frustrating to use and rightfully part of history instead of current kit, but I
find this inspiring. I wish I could get my computer to work this way!
</p>
<p>
  I've been using VIM exclusively the last few weeks and trying to get used to it.
I'm realizing that I spend way more time <em>moving around</em> then I actually do
typing new things. I've come to really appreciate the <code>/</code> and <code>?</code> commands which
search ahead and back for some text to move towards. It's very powerful, but
slightly awkward to use, so I find myself not using it as much as I should.
Having that functionality under my thumbs would feel like a super power.
</p>
<p>
  There aren't that many Canon Cats still floating around, but if you want to get
a feel for what using one of these is like, you can run its
<a href="https://archive.org/details/canoncat" target="_blank">software in emulation mode</a> thanks to the
Internet Archive! How to use this is not very clear, but here's what I figured
out so far:
</p>
<ul>
  <li>
    <p>
      option keys (left and right) are Jump
    </p>
  </li>
  <li>
    <p>
      <code>\</code> key is Undo
    </p>
  </li>
  <li>
    <p>
      control is &quot;Use Front&quot;
    </p>
  </li>
  <li>
    <p>
      Full screen the emulator to immerse yourself!
    </p>
  </li>
</ul>
<p>
  Obviously, it's not quite the same as having the Cat keyboard in front of you,
but I still found it very curious to use and gave me confidence that this could
be an easily learned and very fun to use digital world to live in.
</p>
<p>
  There are surprisingly almost no modern tools that reference back to Leap and
the Canon Cat. One notable exception is the <a href="https://100r.co/site/left.html" target="_blank">Left</a> text editor by Hundred Rabbits,
which very recently
<a href="https://twitter.com/hundredrabbits/status/1466832328462790656?s=21" target="_blank">added Leap</a>.
</p>
<p>
  Here are some resources with a lot more content, digitized instruction manuals,
history, and other bits and bobs down this particular rabbit hole:
</p>
<ul>
  <li>
    <p>
      <a href="http://www.canoncat.net/" target="_blank">canoncat.net</a>
    </p>
  </li>
  <li>
    <p>
      <a href="https://www.canoncat.org/" target="_blank">canoncat.org</a>
    </p>
  </li>
  <li>
    <p>
      <a href="https://www.old-computers.com/museum/computer.asp?st=1&amp;c=642" target="_blank">Canon Cat on old-computers.com</a>
    </p>
  </li>
  <li>
    <p>
      <a href="https://en.wikipedia.org/wiki/The_Humane_Interface" target="_blank">The Humane Interface</a>
    </p>
  </li>
</ul>
<p>
  Finally, I'll leave you with this convincing promotional video showing off the
Cat in use, showing both more of what it can do<a href="#fn-calc" id="fn-calc.ref" data-footnote-ref aria-label="note"><sup>5</sup></a> as well as some truly
excellent '80s hairstyles.
</p>
<div class="yt-player" style="--aspectRatio:1.3333333333333333;">
  <iframe src="https://www.youtube.com/embed/o_TlE_U_X3c" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>
<section data-footnotes aria-label="footnotes">
  <ol>
    <li id="fn-swyft">
      <p>
        Jef Raskin started the project by founding a company, Information
Appliances, and called the computer SWYFT: &quot;Superb With Your Favorite
Typing&quot;. Canon acquired his company and their marketing team came up with
the name &quot;Cat.&quot; No idea if Apple intentionally took a pot-shot at Jef with
Swift.
      </p>
      <a href="#fn-swyft.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
    <li id="fn-hth">
      <p>
        Jef Raskin briefly discussed the Canon Cat's Leap innovation in an
<a href="https://youtu.be/1qvrOEExlps?t=1337" target="_blank">Feb 1992 episode</a> of High Tech Heros,
a public access show from Los Altos.
      </p>
      <a href="#fn-hth.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
    <li id="fn-creep">
      <p>
        Arrow behavior is kinda still there. Tapping Leap on its own moves the
cursor ahead by one. they fittingly called this &quot;Creep&quot;. Shift+Leap would
scroll the page up and down.
      </p>
      <a href="#fn-creep.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
    <li id="fn-use-front">
      <p>
        The &quot;Use Front&quot; key is essentially your &quot;Command&quot; key, but they
printed the commands on the front of the key caps, hence &quot;Use Front&quot;.
      </p>
      <a href="#fn-use-front.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
    <li id="fn-calc">
      <p>
        Like running calculations (or code!) live in a document with a key press
instead of having a dedicated calc app. Really cool ideas.
      </p>
      <a href="#fn-calc.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
  </ol>
</section>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://leebyron.com/til/meta-tags-and-the-semantic-web/
    </id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/meta-tags-and-the-semantic-web/"/>
    <published>2022-01-11T22:53:30.000-08:00</published>
    <updated>2022-01-12T21:57:12.000+00:00</updated>
    <title>meta tags &amp; the semantic web</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="web"/>
    <content type="html"><![CDATA[<p>
  For better or worse these days a lot of the web is consumed via an aggregator
platform. Search engines like Google, or Duck Duck Go, and social media like
Facebook, Twitter, Reddit, and Mastodon. When links are displayed on these
platforms, they use available metadata to give as rich a preview as possible.
</p>
<p>
  This is the reality of the branch of the multiverse we find ourselves in tracing
back to a quote from Sir Tim Berners Lee from
<a href="https://youtu.be/vG8WpLr6y_U?" target="_blank">1999</a>:
</p>
<blockquote>
  <p>
    I have a dream for the Web [in which computers] become capable of analyzing
all the data on the Web – the content, links, and transactions between people
and computers. A &quot;Semantic Web&quot;, which makes this possible, has yet to emerge,
but when it does, the day-to-day mechanisms of trade, bureaucracy and our
daily lives will be handled by machines talking to machines.
  </p>
</blockquote>
<p>
  Some variation of this is is right...
</p>
<p>
  However, for us Webmasters, it's tough to keep track of the peculiarities of how
each platform would like to consume semantic information. Having just added some
meta data to this very page, I'll drop some links and tl;dr of what I learned
along the way:
</p>
<ul>
  <li>
    <p>
      <a href="https://www.w3.org/RDF/" target="_blank">RDF</a> (Resource Description Language) and <a href="https://en.wikipedia.org/wiki/Web_Ontology_Language" target="_blank">OWL</a> (Web Ontology Language) were
early standards that live on. They don't get a lot of direct practical
use<a href="#fn-rdfa" id="fn-rdfa.ref" data-footnote-ref aria-label="note"><sup>1</sup></a>. There is also <a href="https://microformats.io/" target="_blank">microformats</a> which still has some use, but is no
longer preferred.
    </p>
  </li>
  <li>
    <p>
      <a href="https://ogp.me/" target="_blank">Open Graph</a> is a standard proposed by Facebook which addressed the mess that
was the web at the time<a href="#fn-og-deck" id="fn-og-deck.ref" data-footnote-ref aria-label="note"><sup>2</sup></a>. It has a surprisingly broad schema and some
quirks<a href="#fn-og-non-standard" id="fn-og-non-standard.ref" data-footnote-ref aria-label="note"><sup>3</sup></a>. Since then, <a href="https://json-ld.org/" target="_blank">JSON-LD</a> has become the preferred tool.
JSON is way easier for representing data, and there's a huge set of
<a href="https://schema.org/docs/schemas.html" target="_blank">available schema</a>.
    </p>
  </li>
  <li>
    <p>
      <a href="https://developers.facebook.com/docs/sharing/webmasters/#markup" target="_blank">Facebook</a> (and other Meta apps, like Messenger) use Open Graph with some
minor Facebook specific additions.
    </p>
    <ul>
      <li>
        <p>
          Use the <a href="https://developers.facebook.com/tools/debug/" target="_blank">share debugger</a> to
see what information was parsed and any warnings. It shows a share preview
based on an older version of their desktop site and can't be relied on.
        </p>
      </li>
    </ul>
  </li>
  <li>
    <p>
      <a href="https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/markup" target="_blank">Twitter</a> uses Open Graph if it finds them, but adds &quot;Card Tags&quot;. This is most
helpful when you want something to appear slightly differently on Twitter vs
Facebook.
    </p>
    <ul>
      <li>
        <p>
          Use their <a href="https://cards-dev.twitter.com/validator" target="_blank">card validator</a> to see
what a card will look like. This shows for desktop, I'm not aware of a
mobile preview.
        </p>
      </li>
    </ul>
  </li>
  <li>
    <p>
      <a href="https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data" target="_blank">Google</a> will also use Open Graph if it finds it, but prefers <a href="https://json-ld.org/" target="_blank">JSON-LD</a>.
    </p>
    <ul>
      <li>
        <p>
          There are
<a href="https://developers.google.com/search/docs/advanced/structured-data" target="_blank">multiple validators</a>
for both generic JSON-LD and Google specific results. Despite being the most
mature of these tools, I've found it least helpful in giving error messages.
Caveat caelator.
        </p>
      </li>
    </ul>
  </li>
</ul>
<p>
  One last resource that I found very helpful was the <a href="http://linter.structured-data.org/" target="_blank">structured data linter</a>.
This tool understands just about all of the above. It's not all that helpful for
understanding how any one service will interpret your page, but is very useful
to ensure the meta data you expect is being found, and that there are no
inconsistencies or other problems.
</p>
<section data-footnotes aria-label="footnotes">
  <ol>
    <li id="fn-rdfa">
      <p>
        RDF actually does get a fair amount of practical use via <a href="https://www.w3.org/TR/rdfa-primer/" target="_blank">RDFa</a> (RDF for
attributes) because it can markup existing HTML files as opposed to
requiring separate XML files. In fact, this site uses RDFa to embed
licensing data in the footer! Check it out in the
<a href="http://linter.structured-data.org/?url=https:%2F%2Fleebyron.com%2Ftil%2Fmeta-tags-and-the-semantic-web%2F" target="_blank">structured data linter</a>.
      </p>
      <a href="#fn-rdfa.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
    <li id="fn-og-deck">
      <p>
        Facebook made an interesting
<a href="https://www.scribd.com/doc/30715288/The-Open-Graph-Protocol-Design-Decisions" target="_blank">deck on the design decisions</a>
of Open Graph that details these problems. It's an interesting read.
      </p>
      <a href="#fn-og-deck.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
    <li id="fn-og-non-standard">
      <p>
        Open Graph uses <code>&lt;meta&gt;</code> tags, but annoyingly uses a
<code>property=</code> attribute which was borrowed from RDF but is non standard for a
<code>&lt;meta&gt;</code> tag. It ideally should have used <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-name" target="_blank"><code>name=</code></a> (which Twitter cards does).
Someone should have caught that in code review.
      </p>
      <a href="#fn-og-non-standard.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
  </ol>
</section>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/by-rss-you-mean-atom/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/by-rss-you-mean-atom/"/>
    <published>2022-01-10T21:50:17.000-08:00</published>
    <updated>2022-01-12T08:47:25.000+00:00</updated>
    <title>by RSS you mean Atom</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="til"/>
    <content type="html"><![CDATA[<p>
  I set about adding an &quot;RSS feed&quot; for this til site, only to find that despite
reader apps calling themselves &quot;RSS readers&quot;, that most &quot;RSS&quot; feeds out there
are not actually written in <a href="https://www.rssboard.org/rss-specification" target="_blank">RSS</a>, they're mostly written in <a href="https://datatracker.ietf.org/doc/html/rfc4287" target="_blank">Atom</a>. There are
actually a small handful of feed document formats out there, and RSS is sort of
the &quot;Kleenex&quot; of the feed marketplace: all feeds find themselves called &quot;RSS&quot;
when they may not be.
</p>
<p>
  RSS was created in 1999 (the
<a href="https://www.youtube.com/watch?v=vG8WpLr6y_U" target="_blank">best era of the web</a> if you ask
me) by Netscape as a simplification of RDF. It was ...tossed over the wall. This
was right about the time of the Netscape &amp; AOL merger, and RSS disappeared from
netscape.com. Meanwhile RSS was <em>very popular</em> in the early days of the internet
and adopted by many media companies figuring out this whole world wide web
thing. In 2002 the version of RSS we mostly know was created by an independent
group (retitled from &quot;Rich Site Summary&quot; to &quot;Really Simple Syndication&quot;) but
under dubious legal circumstances and under the shadow of the AOL/Netflix
conglomerate which technically owned the copyright.
</p>
<p>
  Emerge <a href="https://datatracker.ietf.org/doc/html/rfc4287" target="_blank">Atom</a>, an open standard introduced in 2003 meant to replace RSS. It's
vendor neutral and open, solves some of RSS's quirks, extensible,
internationalized, championed by Google and other cool young tech companies, and
even blessed by the IETF as RFC4287. And it still gets called &quot;RSS&quot;, sigh...
open source is hard sometimes.
</p>
<p>
  Two decades later, please use <a href="https://datatracker.ietf.org/doc/html/rfc4287" target="_blank">Atom</a> for your syndication feeds. It has been
hardened by two decades of use and still works great.
</p>
<p>
  In fact, even this site <a href="https://leebyron.com/til/feed.xml" target="_blank">has one</a>! Consider
subscribing with <a href="https://netnewswire.com/" target="_blank">NetNewsWire</a>, an open source feed reader.
</p>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/ascii-table/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/ascii-table/"/>
    <published>2022-01-09T23:49:50.000-08:00</published>
    <updated>2022-01-13T05:50:10.000+00:00</updated>
    <title>ascii table</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <content type="html"><![CDATA[<p>
  The <a href="https://en.wikipedia.org/wiki/ASCII" target="_blank">ASCII</a> 7-bit character encoding is ubiquitous<a href="#fn-actually-utf8" id="fn-actually-utf8.ref" data-footnote-ref aria-label="note"><sup>1</sup></a> and
foundational to how computers talk to each other. It has an absolutely
fascinating history that dates surprisingly far back. The ASCII standard started
in 1963, and was iterated until 1986. ASCII was based on ITA2, a telegraph
standard from 1924, which itself derived from <a href="https://en.wikipedia.org/wiki/Baudot_code" target="_blank">Baudot code</a> from 1870—literally
the beginning of digital communication (the namesake for &quot;baud&quot; speed).
</p>
<style>.ascii-table td:first-child { background: #00000008; }</style>
<pre class="ascii-table"><div class="table-wrapper"><table><thead><tr><th></th><th><code>0x00</code></th><th><code>0x10</code></th><th><code>0x20</code></th><th><code>0x30</code></th><th><code>0x40</code></th><th><code>0x50</code></th><th><code>0x60</code></th><th><code>0x70</code></th></tr></thead><tbody><tr><td><strong><code>0x00</code></strong></td><td><a href="https://en.wikipedia.org/wiki/Null_character" title="Null" target="_blank"><code>␀</code></a> <code>⌃@</code> <code>\0</code></td><td><a href="https://en.wikipedia.org/wiki/Data_Link_Escape" title="Data Link Escape" target="_blank"><code>␐</code></a> <code>⌃P</code></td><td>Space</td><td><code>0</code></td><td><code>@</code></td><td><code>P</code></td><td><code>`</code></td><td><code>p</code></td></tr><tr><td><strong><code>0x01</code></strong></td><td><a href="https://en.wikipedia.org/wiki/Start_of_Heading" title="Start of Heading" target="_blank"><code>␁</code></a> <code>⌃A</code></td><td><a href="https://en.wikipedia.org/wiki/Device_Control_1" title="Device Control 1 / XON / Resume" target="_blank"><code>␑</code></a> <code>⌃Q</code></td><td><code>!</code></td><td><code>1</code></td><td><code>A</code></td><td><code>Q</code></td><td><code>a</code></td><td><code>q</code></td></tr><tr><td><strong><code>0x02</code></strong></td><td><a href="https://en.wikipedia.org/wiki/Start_of_Text" title="Start of Text" target="_blank"><code>␂</code></a> <code>⌃B</code></td><td><a href="https://en.wikipedia.org/wiki/Device_Control_2" title="Device Control 2" target="_blank"><code>␒</code></a> <code>⌃R</code></td><td><code>&quot;</code></td><td><code>2</code></td><td><code>B</code></td><td><code>R</code></td><td><code>b</code></td><td><code>r</code></td></tr><tr><td><strong><code>0x03</code></strong></td><td><a href="https://en.wikipedia.org/wiki/End-of-Text_character" title="End of Text" target="_blank"><code>␃</code></a> <code>⌃C</code></td><td><a href="https://en.wikipedia.org/wiki/Device_Control_3" title="Device Control 3 / XOFF / Pause" target="_blank"><code>␓</code></a> <code>⌃S</code></td><td><code>#</code></td><td><code>3</code></td><td><code>C</code></td><td><code>S</code></td><td><code>c</code></td><td><code>s</code></td></tr><tr><td><strong><code>0x04</code></strong></td><td><a href="https://en.wikipedia.org/wiki/End-of-Transmission_character" title="End of Transmission" target="_blank"><code>␄</code></a> <code>⌃D</code></td><td><a href="https://en.wikipedia.org/wiki/Device_Control_4" title="Device Control 4" target="_blank"><code>␔</code></a> <code>⌃T</code></td><td><code>$</code></td><td><code>4</code></td><td><code>D</code></td><td><code>T</code></td><td><code>d</code></td><td><code>t</code></td></tr><tr><td><strong><code>0x05</code></strong></td><td><a href="https://en.wikipedia.org/wiki/Enquiry_character" title="Enquiry" target="_blank"><code>␅</code></a> <code>⌃E</code></td><td><a href="https://en.wikipedia.org/wiki/Negative-acknowledge_character" title="Negative Acknowledgement" target="_blank"><code>␕</code></a> <code>⌃U</code></td><td><code>%</code></td><td><code>5</code></td><td><code>E</code></td><td><code>U</code></td><td><code>e</code></td><td><code>u</code></td></tr><tr><td><strong><code>0x06</code></strong></td><td><a href="https://en.wikipedia.org/wiki/Acknowledge_character" title="Acknowledgement" target="_blank"><code>␆</code></a> <code>⌃F</code></td><td><a href="https://en.wikipedia.org/wiki/Synchronous_Idle" title="Synchronous Idle" target="_blank"><code>␖</code></a> <code>⌃V</code></td><td><code>&amp;</code></td><td><code>6</code></td><td><code>F</code></td><td><code>V</code></td><td><code>f</code></td><td><code>v</code></td></tr><tr><td><strong><code>0x07</code></strong></td><td><a href="https://en.wikipedia.org/wiki/Bell_character" title="Bell" target="_blank"><code>␇</code></a> <code>⌃G</code> <code>\a</code></td><td><a href="https://en.wikipedia.org/wiki/End-of-Transmission-Block_character" title="End of Transmission Block" target="_blank"><code>␗</code></a> <code>⌃W</code></td><td><code>'</code></td><td><code>7</code></td><td><code>G</code></td><td><code>W</code></td><td><code>g</code></td><td><code>w</code></td></tr><tr><td><strong><code>0x08</code></strong></td><td><a href="https://en.wikipedia.org/wiki/Backspace" title="Backspace" target="_blank"><code>␈</code></a> <code>⌃H</code> <code>\b</code></td><td><a href="https://en.wikipedia.org/wiki/Cancel_character" title="Cancel" target="_blank"><code>␘</code></a> <code>⌃X</code></td><td><code>(</code></td><td><code>8</code></td><td><code>H</code></td><td><code>X</code></td><td><code>h</code></td><td><code>x</code></td></tr><tr><td><strong><code>0x09</code></strong></td><td><a href="https://en.wikipedia.org/wiki/Horizontal_Tab" title="Horizontal Tab" target="_blank"><code>␉</code></a> <code>⌃I</code> <code>\t</code></td><td><a href="https://en.wikipedia.org/wiki/End_of_Medium" title="End of Medium" target="_blank"><code>␙</code></a> <code>⌃Y</code></td><td><code>)</code></td><td><code>9</code></td><td><code>I</code></td><td><code>Y</code></td><td><code>i</code></td><td><code>y</code></td></tr><tr><td><strong><code>0x0A</code></strong></td><td><a href="https://en.wikipedia.org/wiki/Line_Feed" title="Line Feed" target="_blank"><code>␊</code></a> <code>⌃J</code> <code>\n</code></td><td><a href="https://en.wikipedia.org/wiki/Substitute_character" title="Substitute" target="_blank"><code>␚</code></a> <code>⌃Z</code></td><td><code>*</code></td><td><code>:</code></td><td><code>J</code></td><td><code>Z</code></td><td><code>j</code></td><td><code>z</code></td></tr><tr><td><strong><code>0x0B</code></strong></td><td><a href="https://en.wikipedia.org/wiki/Vertical_Tab" title="Vertical Tab" target="_blank"><code>␋</code></a> <code>⌃K</code> <code>\v</code></td><td><a href="https://en.wikipedia.org/wiki/Escape_character" title="Escape" target="_blank"><code>␛</code></a> <code>⌃[</code> <code>\e</code></td><td><code>+</code></td><td><code>;</code></td><td><code>K</code></td><td><code>[</code></td><td><code>k</code></td><td><code>{</code></td></tr><tr><td><strong><code>0x0C</code></strong></td><td><a href="https://en.wikipedia.org/wiki/Form_Feed" title="Form Feed" target="_blank"><code>␌</code></a> <code>⌃L</code> <code>\f</code></td><td><a href="https://en.wikipedia.org/wiki/File_Separator" title="File Separator" target="_blank"><code>␜</code></a> <code>⌃\</code></td><td><code>,</code></td><td><code>&lt;</code></td><td><code>L</code></td><td><code>\</code></td><td><code>l</code></td><td><code>|</code></td></tr><tr><td><strong><code>0x0D</code></strong></td><td><a href="https://en.wikipedia.org/wiki/Carriage_Return" title="Carriage Return" target="_blank"><code>␍</code></a> <code>⌃M</code> <code>\r</code></td><td><a href="https://en.wikipedia.org/wiki/Group_Separator" title="Group Separator" target="_blank"><code>␝</code></a> <code>⌃]</code></td><td><code>-</code></td><td><code>=</code></td><td><code>M</code></td><td><code>]</code></td><td><code>m</code></td><td><code>}</code></td></tr><tr><td><strong><code>0x0E</code></strong></td><td><a href="https://en.wikipedia.org/wiki/Shift_Out" title="Shift Out" target="_blank"><code>␎</code></a> <code>⌃N</code></td><td><a href="https://en.wikipedia.org/wiki/Record_Separator" title="Record Separator" target="_blank"><code>␞</code></a> <code>⌃^</code></td><td><code>.</code></td><td><code>&gt;</code></td><td><code>N</code></td><td><code>^</code></td><td><code>n</code></td><td><code>~</code></td></tr><tr><td><strong><code>0x0F</code></strong></td><td><a href="https://en.wikipedia.org/wiki/Shift_In" title="Shift In" target="_blank"><code>␏</code></a> <code>⌃O</code></td><td><a href="https://en.wikipedia.org/wiki/Unit_Separator" title="Unit Separator" target="_blank"><code>␟</code></a> <code>⌃_</code></td><td><code>/</code></td><td><code>?</code></td><td><code>O</code></td><td><code>_</code></td><td><code>o</code></td><td><a href="https://en.wikipedia.org/wiki/Delete_character" title="Delete" target="_blank"><code>␡</code></a> <code>⌃?</code></td></tr></tbody></table></div></pre>
<h2 id="other-fun-facts-about-ascii">
  <a href="#other-fun-facts-about-ascii" data-anchor>Other fun facts about ASCII:</a>
</h2>
<ul>
  <li>
    <p>
      The first 128 Unicode values are ASCII. UTF-8, the most common modern
encoding, uses a variable number of bytes to cover the full Unicode spectrum,
but just happens to use exactly one byte for the first 128 and exactly matches
ASCII. That means every ancient ASCII file is also a valid modern UTF-8 file.
This is a <em>beautiful</em> hack and a major reason for the success of UTF-8.
    </p>
  </li>
  <li>
    <p>
      The number digits are carefully placed so <a href="https://en.wikipedia.org/wiki/Binary-coded_decimal" target="_blank">BCD</a> can be converted to ASCII and
vice-versa in one instruction: <code>ascii = bcd XOR 0x30</code>.
    </p>
  </li>
  <li>
    <p>
      Many keys you still reach via &quot;shift&quot; on a modern keyboard are either <code>0x10</code>
or <code>0x20</code> above their standard key, a holdover from mechanical typewriters.
    </p>
  </li>
  <li>
    <p>
      Lowercase letters are exactly <code>0x20</code> above uppercase.
    </p>
  </li>
  <li>
    <p>
      Your &quot;control&quot; key has a <code>⌃</code> on it because its original purpose was to remap
typical keys to control keys by xor'ing the highest bit <code>0x40</code> (<code>XOR</code> also
happens to be <code>^</code> in C). Some of these vestiges of the past still work
everywhere, and all should work in your terminal! Try <code>⌃H</code> for a home-row
oriented backspace.
    </p>
  </li>
</ul>
<section data-footnotes aria-label="footnotes">
  <ol>
    <li id="fn-actually-utf8">
      <p>
        These days it's really UTF-8 thats ubiquitous.
      </p>
      <a href="#fn-actually-utf8.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
  </ol>
</section>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://leebyron.com/til/setup-a-simple-screencast/
    </id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/setup-a-simple-screencast/"/>
    <published>2022-01-07T22:35:43.000-08:00</published>
    <updated>2022-01-12T08:47:25.000+00:00</updated>
    <title>setup a simple screencast</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <content type="html"><![CDATA[<p>
  There's plenty of good software out there for screencasting, but if you're in a
pinch Quicktime Player does a solid job with a bit of prep.
</p>
<ol start="1">
  <li>
    <p>
      Get a clear desktop and open all windows you want to screencast, not full
screened. Also open Quicktime Player.
    </p>
    <ul>
      <li>
        <p>
          Don't forget to increase font size in any terminals, browsers, or IDEs to
increase visibility. 100 columns works okay.
        </p>
      </li>
    </ul>
  </li>
  <li>
    <p>
      File → New Movie Recording
    </p>
    <p>
      Don't actually record a movie. This just abuses the webcam preview so you can
have your face in the screen cast. Resize the window down and position it in
the corner of your desktop.
    </p>
  </li>
  <li>
    <p>
      File → New Screen Recording
    </p>
    <ul>
      <li>
        <p>
          Choose the &quot;Record Selected Portion&quot; and resize the area to be 1280×720 (or
a large size of the same aspect ratio if your screen allows).
        </p>
      </li>
      <li>
        <p>
          You can't move windows around while resizing the recording area, but you
can during recording. If necessary, start a recording to get windows all
lined up.
        </p>
      </li>
      <li>
        <p>
          Open options and make sure your microphone is on.
        </p>
      </li>
      <li>
        <p>
          Record! Press ⌘⌃esc to stop. Trim the resulting video.
        </p>
      </li>
    </ul>
  </li>
</ol>
<p>
  <img src="../media/7f2cdba5d3c1f40e.jpg" alt="screencast-setup.jpg">
</p>
<hr>
<p>
  I did exactly this to record a screencast about this very tool!
</p>
<div class="yt-player" style="--aspectRatio:1.7777777777777777;">
  <iframe src="https://www.youtube.com/embed/iJn9kZw-hw8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/markdown-footnotes/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/markdown-footnotes/"/>
    <published>2022-01-06T22:58:33.000-08:00</published>
    <updated>2022-01-12T08:47:25.000+00:00</updated>
    <title>markdown footnotes</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="markdown"/>
    <content type="html"><![CDATA[<p>
  Much like <a href="../markdown-link-references">markdown link references</a>, footnotes are defined in one place and
referenced in another, but it doesn't matter where the footnote is defined,
they'll always be collected at the end of the document in the order in which
they are referenced<a href="#fn-a-note" id="fn-a-note.ref" data-footnote-ref aria-label="note"><sup>1</sup></a>.
</p>
<p>
  Footnotes are created similar to shortcut reference links, but the identifier
starts with a <code>^</code>.
</p>
<pre data-code-block data-lang="markdown"><code><span data-line="1"><span style="color:#24292EFF;">order in which they are referenced[^a note].</span>
</span></code></pre>
<p>
  A footnote definition is formatted exactly like link reference
definitions<a href="#fn-needs-cr" id="fn-needs-cr.ref" data-footnote-ref aria-label="note"><sup>2</sup></a>: in a box followed by a comma.
</p>
<pre data-code-block data-lang="markdown"><code><span data-line="1"><span style="color:#24292EFF;">[^a note]: Despite footnotes appearing numbered, the identifier can be any text.</span>
</span><span data-line="2"><span style="color:#24292EFF;">This is helpful if you may add more notes later and don't want to be bothered to</span>
</span><span data-line="3"><span style="color:#24292EFF;">reorder them.</span>
</span></code></pre>
<section data-footnotes aria-label="footnotes">
  <ol>
    <li id="fn-a-note">
      <p>
        Despite footnotes appearing numbered, the identifier can be any text.
This is helpful if you may add more notes later and don't want to be bothered to
reorder them.
      </p>
      <a href="#fn-a-note.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
    <li id="fn-needs-cr">
      <p>
        Unlike a link reference definition, a footnote definition needs an
empty line immediately after it, otherwise content from multiple lines is joined
into a single paragraph.
      </p>
      <a href="#fn-needs-cr.ref" data-footnote-backref aria-label="return">↩</a>
    </li>
  </ol>
</section>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>
      https://leebyron.com/til/markdown-link-references/
    </id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/markdown-link-references/"/>
    <published>2022-01-05T10:40:18.000-08:00</published>
    <updated>2022-01-07T21:34:42.000+00:00</updated>
    <title>markdown link references</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="markdown"/>
    <content type="html"><![CDATA[<p>
  Inline markdown links and images can be hard to read with long URLs. References
are a great way to keep prose readable and keep a catalog of links. There are
<a href="https://spec.commonmark.org/0.30/#links" title="Nearly a hundred tests" target="_blank">quite a few variations</a> of the syntax.
</p>
<p>
  Write references with a box around the reference identifier followed by a colon
and the URL, optionally include a trailing title in quotes (which may go on the
following line):
</p>
<pre data-code-block data-lang="markdown"><code><span data-line="1"><span style="color:#24292EFF;">[links]</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">https://spec.commonmark.org/0.30/#links</span>
</span><span data-line="2"><span style="color:#24292EFF;">[links]</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">https://spec.commonmark.org/0.30/#links</span><span style="color:#24292EFF;"> </span><span style="color:#D32F2F;">'</span><span style="color:#2B5581;">Nearly a hundred tests</span><span style="color:#D32F2F;">'</span>
</span></code></pre>
<p>
  Then within prose, refer to them with typical link syntax, but with a trailing
box instead of parentheses. If the linked text is the same as the identifier,
just use a standalone box.
</p>
<pre data-code-block data-lang="markdown"><code><span data-line="1"><span style="color:#24292EFF;">Here is a link about </span><span style="color:#D32F2F;">[markdown links]</span><span style="color:#24292EFF;">[links]. What's the web without </span><span style="color:#D32F2F;">[links]</span><span style="color:#24292EFF;">?</span>
</span></code></pre>
<p>
  Here is a link about <a href="https://spec.commonmark.org/0.30/#links" title="Nearly a hundred tests" target="_blank">markdown links</a>. What's the web without <a href="https://spec.commonmark.org/0.30/#links" title="Nearly a hundred tests" target="_blank">links</a>?
</p>
<p>
  References can appear anywhere in a Markdown file. I often place them right
after the paragraph where they're used. If they're used in multiple places, I'll
group them together at the end of a section or end of the whole document.
</p>
<hr>
<p>
  References can also be used for images. The syntax for the reference is the
same, but the image use itself starts with an <code>!</code>.
</p>
<pre data-code-block data-lang="markdown"><code><span data-line="1"><span style="color:#24292EFF;">!</span><span style="color:#D32F2F;">[moebius]</span>
</span><span data-line="2">
</span><span data-line="3"><span style="color:#24292EFF;">[moebius]</span><span style="color:#D32F2F;">:</span><span style="color:#24292EFF;"> </span><span style="color:#22863A;">https://uploads4.wikiart.org/images/m-c-escher/bond-of-union.jpg</span>
</span><span data-line="4"><span style="color:#24292EFF;">'Bond of Union, M.C. Escher 1956'</span>
</span></code></pre>
<p>
  <img src="https://uploads4.wikiart.org/images/m-c-escher/bond-of-union.jpg" title="Bond of Union, M.C. Escher 1956" alt="moebius">
</p>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/how-to-rearrange-bits/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/how-to-rearrange-bits/"/>
    <published>2022-01-04T00:58:22.000-08:00</published>
    <updated>2022-01-12T08:47:25.000+00:00</updated>
    <title>how to rearrange bits</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <content type="html"><![CDATA[<p>
  If you have a bit-powered display where the elements don't align to the bits in
the byte, you may want to remap bits from the source byte to the destination
byte. Manually writing a bunch of shifts is frustrating, and I found a great
tool which writes this code for you!
</p>
<p>
  <a href="http://programming.sirrida.de/calcperm.php" target="_blank">http://programming.sirrida.de/calcperm.php</a>
</p>
<p>
  I just used this to map sprite binary data to Unicode
<a href="https://www.fileformat.info/info/unicode/block/braille_patterns/list.htm" target="_blank">braille patterns</a>.
The 8 dots in a braille pattern can map to a byte, but perhaps not in the order
you expect.
</p>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
  <entry>
    <id>https://leebyron.com/til/changing-a-word-in-vim/</id>
    <link rel="alternate" type="text/html" href="https://leebyron.com/til/changing-a-word-in-vim/"/>
    <published>2022-01-03T16:34:57.000-08:00</published>
    <updated>2022-01-12T08:47:25.000+00:00</updated>
    <title>changing a word in vim</title>
    <author>
      <name>Lee Byron</name>
      <uri>https://leebyron.com</uri>
    </author>
    <category term="vim"/>
    <content type="html"><![CDATA[<p>
  The <code>c</code> key starts a chord to change something. This is super useful for
changing the word under the cursor. <code>cw</code> will change from the current position
until the end of the next word, and <code>ciw</code> will change the whole word under the
cursor (read: <code>c</code>hange <code>i</code>n <code>w</code>ord).
</p>
<hr>
<p>
  This, combined with other movements can lead to very quick changes. One I've
found quite useful is <code>ci&quot;</code> which changes the contents of a quoted string, and
<code>ca&quot;</code> (<code>c</code>hange <code>a</code>ll <code>&quot;</code>quoted) to include the quote marks themselves. Or when
working in prose, <code>cis</code> will change the current sentence and <code>cip</code> the current
paragraph.
</p>
<p>
  Sometimes a change command is hard to think about first, or the area you want to
change is subtly different from what the change command would do. Replace <code>c</code>
with <code>v</code> to get a similar visual motion (like <code>v3w</code> for 3 words), muck about,
then press <code>c</code> to change.
</p>
<p>
  Changing the whole line (but keeping the indentation) is simply <code>cc</code>.
</p>]]></content>
    <rights>© 2022 Lee Byron ⸱ licensed under CC BY 4.0</rights>
  </entry>
</feed>